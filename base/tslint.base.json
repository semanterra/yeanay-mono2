//noinspection JSUnusedGlobalSymbols
/**
  * These rule settings are a broad, general recommendation for a good default
  * configuration, but should be tuned for personal or team preferences if needed.
  */

{
    "extends": [
        // your other plugins...
        "tslint-react-hooks"
    ],
    "rules": {
        "react-hooks-nesting": "error",

        /**
          * Security Rules. The following rules should be turned on because they find security issues
          * or are recommended in the Microsoft Secure Development Lifecycle (SDL)
          */
        "no-banned-terms": true,
        "no-delete-expression": true,
        "no-disable-auto-sanitization": true,
        "no-eval": true,
        "no-exec-script": true,
        "no-function-constructor-with-string-args": true,
        "no-http-string": [true, "http://www.example.com/?.*", "http://www.examples.com/?.*"],
        "no-octal-literal": true,
        "no-reserved-keywords": true,
        "no-string-based-set-immediate": true,
        "no-string-based-set-interval": true,
        "no-string-based-set-timeout": true,
        /**
          * Common Bugs and Correctness. The following rules should be turned on because they find
          * common bug patterns in the code or enforce type safety.
          */
        "forin": true,
        "label-position": true,
        "no-any": false,
        "no-arg": true,
        "no-bitwise": true,
        "no-conditional-assignment": true,
        // useful in tests, etc.  Consider re-enabling.
        "no-console": [false, "debug", "info", "log", "time", "timeEnd", "trace"],
        "no-constant-condition": true,
        "no-control-regex": true,
        "no-debugger": true,
        "no-duplicate-switch-case": true,
        "no-duplicate-variable": true,
        "no-empty": true,
        "no-for-in-array": false,
        "no-increment-decrement": true,
        "no-invalid-regexp": true,
        "no-invalid-this": false,
        "no-regex-spaces": true,
        "no-sparse-arrays": true,
        "no-unnecessary-class": true,
        "no-string-literal": false,
        "no-string-throw": true,
        "no-unnecessary-bind": true,
        "no-unnecessary-override": true,
        "no-unsafe-finally": true,
        "no-unused-expression": false, // false because it trips on chai assertions
        "no-use-before-declare": true,
        "no-with-statement": true,
        "promise-must-complete": true,
        "radix": true,
        "switch-default": true,
        "triple-equals": [true, "allow-null-check"],
        "use-isnan": true,
        "use-named-parameter": true,
        /**
          * Code Clarity. The following rules should be turned on because they make the code
          * generally more clear to the reader.
          */
        "adjacent-overload-signatures": true,
        "array-type": [true, "array"],
        "arrow-parens": [true], // always require parens even for single params
        "callable-types": true,
        "class-name": true,
        "comment-format": [true, "check-space"],
        "cyclomatic-complexity": [true, 20],
        "export-name": false,
        "function-name": true,
        "import-name": false,
        "interface-name": false,
        "jsdoc-format": true,
        "max-classes-per-file": false, // we generally recommend making one public class per file
        "max-file-line-count": [true, 500],
        "max-func-body-length": [true, 100, {"ignore-parameters-to-function-regex": "describe"}],
        "max-line-length": [true, 100],
        "member-access": true,

        // prefer to keep related methods close to each other regardless of access level
        // "member-ordering": [true, {"order": "fields-first"}],

        "missing-jsdoc": false,
        "new-parens": true,
        "no-construct": true,
        "no-default-export": false,
        "no-empty-interface": false, //true,
        "no-for-in": true,
        "no-function-expression": false,
        "no-inferrable-types": false,
        // turn no-inferrable-types off in order to make the code consistent in its use of type decorations
        "no-multiline-string": false,
        // multiline-strings often introduce unnecessary whitespace into the string literals
        "no-null-keyword": false,
        // turn no-null-keyword off and use undefined to mean not initialized and null to mean without a value
        "no-relative-imports": false,
        "no-require-imports": false,
        "no-shadowed-variable": true,
        "no-suspicious-comment": true,
        "no-typeof-undefined": true,
        "no-unnecessary-field-initialization": false,
        // true, // false bc used to note to reader initial state
        "no-unnecessary-local-variable": false,
        // true, // false bc often useful for debugging, et al
        "no-var-keyword": true,
        "no-var-requires": true,
        "no-this-assignment": true,
        "object-literal-shorthand": true,
        "object-literal-sort-keys": false,
        // turn object-literal-sort-keys off and sort keys in a meaningful manner
        "one-variable-per-declaration": [true, "ignore-for-loop"],
        "only-arrow-functions": false, // there are many valid reasons to declare a function
        "ordered-imports": false,
        "prefer-array-literal": true,
        "prefer-const": false,
        "prefer-for-of": true,
        "typedef": [
            true, "call-signature", "parameter", "property-declaration", /*"variable-declaration",*/
            "member-variable-declaration"
        ],
        "underscore-consistent-invocation": [true, {"style": "instance"}],
        "unified-signatures": true,
        "variable-name": [
            true, "ban-keywords", "check-format", "allow-leading-underscore", "allow-snake-case"
        ],
        /**
          * Whitespace related rules. The only recommended whitespace strategy is to pick a single format and
          * be consistent.
          */
        "align": [true, "parameters", "statements"],
        "curly": true,
        "eofline": true,
        "indent": [true, "spaces"],
        "linebreak-style": true,
        "no-consecutive-blank-lines": false,
        "no-empty-line-after-opening-brace": false,
        "no-single-line-block-comment": false,
        "no-trailing-whitespace": false,
        "no-unnecessary-semicolons": true,
        "object-literal-key-quotes": [true, "as-needed"],
        "one-line": [true, "check-open-brace", "check-whitespace"],
        "quotemark": [true, "single"],
        "semicolon": [true, "never"],
        "trailing-comma": [
            true, {
                "multiline": {
                    "exports": "always",
                    "imports": "always",
                    "objects": "always",
                    "arrays": "always",
                    "functions": "never",
                    "typeLiterals": "never"
                }
            }
        ], // forcing trailing commas for multi-line
        // lists results in lists that are easier to reorder and version control diffs that are more clear.
        // Many teams like to have multiline be 'always'. There is no clear consensus on this rule but the
        "typedef-whitespace": [
            true, {
                // forces a space before the colon in a type specifier
                // "call-signature": "nospace",
                "index-signature": "nospace",
                "parameter": "nospace",
                "property-declaration": "nospace",
                "variable-declaration": "nospace"
            }
        ],
        "whitespace": [
            true, "check-branch", "check-decl"/*, "check-operator",*//*"check-separator",*/
            /*"check-type"*/
        ],
        /**
          * Controversial/Configurable rules.
          */
        "ban": false, // only enable this if you have some code pattern that you want to ban
        "no-angle-bracket-type-assertion": true,
        // pick either type-cast format and use it consistently
        "no-internal-module": false, // only enable this if you are not using internal modules
        "no-mergeable-namespace": false, // your project may require mergeable namespaces
        "no-namespace": false, // only enable this if you are not using modules/namespaces
        "no-reference": true,
        // in general you should use a module system and not /// reference imports
        "no-unexternalized-strings": false,
        // the VS Code team has a specific localization process that this rule enforces
        "prefer-type-cast": false, // pick either type-cast format and use it consistently

        /**
          * Deprecated rules. The following rules are deprecated for various reasons.
          */
        "missing-optional-annotation": false, // now supported by TypeScript compiler
        "no-duplicate-parameter-names": false, // now supported by TypeScript compiler
        "no-missing-visibility-modifiers": false, // use tslint member-access rule instead
        "no-multiple-var-decl": false, // use tslint one-variable-per-declaration rule instead
        "no-switch-case-fall-through": false, // now supported by TypeScript compiler
        "no-unreachable": false, // now supported by TypeScript compiler
        "no-unused-imports": false, // use tslint no-unused-variable rule instead

        /**
          * Chai/Mocha
          **/
        "chai-vague-errors": true,
        "chai-prefer-contains-to-index-of": true,
        "mocha-no-side-effect-code": false, // plays poorly with jest

        "no-return-await": true,
        "await-promise": true,
        "no-floating-promises": true
    }
}
