// From https://gist.github.com/binarymax/ab3e917c170ca95268e5

import { assign } from 'lodash'

/* tslint:disable:no-bitwise */

export class Bitmap {

    public length: number
    private _cols: number
    private _shift: number
    private _rows: number
    private _bin: Uint8Array

    constructor(size: number | Uint8Array | Bitmap) {

        this._cols = 8
        this._shift = 3
        if ( size instanceof Uint8Array ) {
            const arr: Uint8Array = size
            this._rows = arr.length
            this._bin = arr
            this.length = arr.length * 8
        } else if ( size instanceof Bitmap ) {
            assign(this, size)
            this._bin = Uint8Array.from(size._bin)
        } else {
            this._rows = (size >> this._shift) + 1
            this._bin = new Uint8Array(this._rows)
            this.length = size
        }
    }

// Gets the bool at offset
    public getBit(index: number): boolean {
        const row: number = index >> this._shift
        const col: number = index % this._cols
        const bit: number = 1 << col
        return (this._bin[row] & bit) > 0
    }

// Sets a bit at offset to bool
    public setBit(index: number, val: boolean = true): void {
        if ( index >= this.length ) {
            throw new Error('Bitmap.set overflow')
        }
        const row: number = index >> this._shift
        const col: number = index % this._cols
        let bit: number = 1 << col
        if ( val ) {
            this._bin[row] |= bit
        } else {
            bit = 255 ^ bit
            this._bin[row] &= bit
        }
    }

// Flip a single bit at offset
    public flip(index: number): void {
        const row: number = Math.floor(index / this._cols)
        const col: number = index % this._cols
        const bit: number = 1 << col
        this._bin[row] ^= bit
    }

// Reset to all 1's
    public fill(): void {
        for ( let i: number = 0; i < this._rows; i += 1 ) {
            this._bin[i] = 255
        }
    }

// Reset to all 0's
    public clear(): void {
        for ( let i: number = 0; i < this._rows; i += 1 ) {
            this._bin[i] = 0
        }
    }

    public count(filter?: (index: number) => boolean): number {
        let ret: number = 0
        if ( filter ) {
            for ( let i: number = 0; i < this.length; i += 1 ) {
                if ( filter(i) ) {
                    ret += ~~this.getBit(i)
                }
            }
        } else {
            for ( let i: number = 0; i < this.length; i += 1 ) {
                ret += ~~this.getBit(i)
            }
        }
        return ret
    }

    public and(other: Bitmap): Bitmap {
        const ret: Bitmap = new Bitmap(this)
        for ( let i: number = 0; i < ret._rows; i += 1 ) {
            ret._bin[i] = ret._bin[i] & other._bin[i]
        }
        return ret
    }

    public or(other: Bitmap): Bitmap {
        const ret: Bitmap = new Bitmap(this)
        for ( let i: number = 0; i < ret._rows; i += 1 ) {
            ret._bin[i] = ret._bin[i] | other._bin[i]
        }
        return ret
    }

    public not(): Bitmap {
        const ret: Bitmap = new Bitmap(this)
        for ( let i: number = 0; i < ret._rows; i += 1 ) {
            ret._bin[i] = ~ret._bin[i]
        }
        return ret
    }

    // tslint:disable-next-line:no-any
    public forEach(func: (index: number) => any, val: boolean = true): void {
        for ( let i: number = 0; i < this.length; i += 1 ) {
            if ( this.getBit(i) === val ) {
                func(i)
            }
        }
    }

}
